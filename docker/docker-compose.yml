version: '3.1'

services:
  user-service:
    build:
      context: ./../user-service
      dockerfile: Dockerfile
    ports:
      - '3001:8080'
    networks: 
      - app-network
    depends_on:
      - postgres
    privileged: true

  notification-service:
    build:
      context: ./../notification-service
      dockerfile: Dockerfile
    ports:
      - '3002:8080'
    networks: 
      - app-network
    depends_on:
      - postgres
    privileged: true

  flight-service:
    build:
      context: ./../flight-service
      dockerfile: Dockerfile
    ports:
      - '3003:8080'
    networks: 
      - app-network
    depends_on:
      - postgres
    privileged: true

  airport-service:
    build:
      context: ./../airport-service
      dockerfile: Dockerfile
    ports:
      - '3004:8080'
    networks: 
      - app-network
    depends_on:
      - postgres
    privileged: true

  airplane-service:
    build:
      context: ./../airplane-service
      dockerfile: Dockerfile
    ports:
      - '3005:8080'
    networks: 
      - app-network
    depends_on:
      - postgres
    privileged: true

  admin-service:
    build:
      context: ./../admin-service
      dockerfile: Dockerfile
    ports:
      - '3006:8080'
    networks: 
      - app-network
    depends_on:
      - postgres
    privileged: true

  swagger-editor:
    image: swaggerapi/swagger-editor
    container_name: "swagger-editor"
    ports:
      - "8081:8080"
    networks: 
      - app-network
    depends_on:
      - user-service
      - notification-service
      - flight-service
      - airport-service
      - airplane-service
      - admin-service

  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: swagger-ui
    ports:
      - "8080:8080"
    volumes:
      - ./swagger/openapi.json:/openapi.json
    environment:
      SWAGGER_JSON: /openapi.json
    networks: 
      - app-network
    depends_on:
      - user-service
      - notification-service
      - flight-service
      - airport-service
      - airplane-service
      - admin-service
      
  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    user: root
    restart: always
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - ./postgres/erd.sql:/docker-entrypoint-initdb.d/erd.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    privileged: true

  # neo4j:
  #   build:
  #     context: ./neo4j
  #     dockerfile: Dockerfile
  #   user: root
  #   ports:
  #     - "7687:7687"
  #     - "7474:7474"
  #     - "7473:7473"
  #   command: ["./init-db.sh"]
  #   networks:
  #     - app-network
  #   privileged: true

  pdadmin:
    build:
      context: ./pgadmin
      dockerfile: Dockerfile
    user: root
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: example@gmail.com
      PGADMIN_DEFAULT_PASSWORD: example
      PGADMIN_SERVER_MODE: 'True'
      PGADMIN_SERVER_JSON_FILE: /pgadmin4/servers.json
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres
    links:
      - postgres
    ports:
      - "81:80"
    networks:
      - app-network
    privileged: true

  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  grafana:
    build:
      context: ./grafana
      dockerfile: Dockerfile
    ports:
      - "3010:3000"
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources/
      - ./grafana/dashboards-config:/etc/grafana/provisioning/dashboards/
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - app-network

  elasticsearch:
    build:
      context: ./elasticsearch
      dockerfile: Dockerfile
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      discovery.type: single-node
    networks:
      - app-network

  logstash:
    build:
      context: ./logstash
      dockerfile: Dockerfile
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "9600:9600"
      - "12201:12201/udp"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - app-network

  kibana:
    build:
      context: ./kibana
      dockerfile: Dockerfile
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - ./kibana/kibana.ndjson:/usr/share/kibana/config/kibana.ndjson
    ports:
      - "5601:5601"
    depends_on:
    - elasticsearch
    networks:
      - app-network

networks:
  app-network:
    driver: bridge